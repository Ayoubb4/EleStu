import { Injectable, UnauthorizedException, Logger, NotFoundException } from '@nestjs/common';
import { UserService } from '../users/user.service';
import * as nodemailer from 'nodemailer';
import { SentMessageInfo, Options } from 'nodemailer/lib/smtp-transport';

@Injectable()
export class AuthService {
    private readonly logger = new Logger(AuthService.name);
    private transporter: nodemailer.Transporter<SentMessageInfo, Options>;

    constructor(private userService: UserService) {
        // Configurar el transporter de nodemailer
        this.transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: 'elestu777@gmail.com',
                pass: 'dhhgznilxrqogsag',
            },
        });
    }

    async login(loginData: { email: string; password: string }) {
        this.logger.log(`Intento de inicio de sesi칩n para: ${loginData.email}`);

        // Buscar usuario por email
        const user = await this.userService.findByEmail(loginData.email);

        // Verificar si el usuario existe y la contrase침a coincide
        if (!user || user.password !== loginData.password) {
            this.logger.warn(`Inicio de sesi칩n fallido para: ${loginData.email}`);
            throw new UnauthorizedException('Credenciales inv치lidas');
        }

        this.logger.log(`Inicio de sesi칩n exitoso para: ${loginData.email}`);

        // Eliminar la contrase침a del objeto de respuesta
        const { password, ...userWithoutPassword } = user;

        return {
            success: true,
            user: userWithoutPassword
        };
    }

    async verify() {
        // Esta funci칩n simplemente devuelve true para simular verificaci칩n
        return { isValid: true };
    }

    async forgotPassword(email: string) {
        this.logger.log(`Solicitud de recuperaci칩n de contrase침a para: ${email}`);

        // Buscar usuario por email
        const user = await this.userService.findByEmail(email);

        if (!user) {
            this.logger.warn(`Usuario no encontrado: ${email}`);
            throw new NotFoundException('No existe un usuario con este correo electr칩nico');
        }

        // Enviar correo con la contrase침a
        const mailOptions = {
            from: 'elestu777@gmail.com',
            to: email,
            subject: 'Recuperaci칩n de contrase침a',
            text: `춰Hola ${user.name}! 游녦\n\nHemos recibido una solicitud para restablecer tu contrase침a.  
                Aqu칤 tienes tu contrase침a:\n\n游댏 Contrase침a: ${user.password}\n\nTe recomendamos cambiarla por una personalizada desde tu perfil en cuanto accedas.\n\nSi t칰 no solicitaste este cambio, por favor cont치ctanos de inmediato.\n\nUn abrazo,\nEl equipo de EleStu 游눛`
        };


        try {
            await this.transporter.sendMail(mailOptions);
            this.logger.log(`Correo de recuperaci칩n enviado a: ${email}`);
            return { success: true, message: 'Se ha enviado un correo con tu contrase침a' };
        } catch (error) {
            this.logger.error(`Error al enviar correo: ${error.message}`, error.stack);
            throw new Error('No se pudo enviar el correo de recuperaci칩n');
        }
    }
}